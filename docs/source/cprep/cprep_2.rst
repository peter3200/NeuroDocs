CBIG2016 Preproc Step 2
========================

Overview
********
For this step of processing, we are going to submit the CBIG2016 preprocessing jobs (1 per subject) using a wrapper script as follows:

Job Script 
**********

The job script will look something like this:

.. code-block:: bash 

    #!/bin/bash

    #SBATCH --time=20:00:00   # walltime
    #SBATCH --ntasks=1   # number of processor cores (i.e. tasks)
    #SBATCH --nodes=1   # number of nodes
    #SBATCH --mem-per-cpu=51250M   # memory per CPU core
    #SBATCH -J "preproc"   # job name

    # Set the max number of threads to use for programs using OpenMP. Should be <= ppn. Does nothing if the program doesn't use OpenMP.
    export OMP_NUM_THREADS=$SLURM_CPUS_ON_NODE

    #Load git and matlab modules
    ml git/2.14
    ml matlab/r2018b
    LD_PRELOAD= matlab &
    unset DISPLAY

    #Set paths! ADD YOUR NETID: 
    code_Dir=/fslgroup/fslg_spec_networks/compute/code/ind_parc/CBIG2016_preproc
    CBIG_Dir=/fslgroup/fslg_rdoc/compute/CBIG
    out_Dir=/fslgroup/fslg_spec_networks/compute/results/CBIG2016_preproc_FS6
    subj=$1
    subj_Dir=/fslgroup/fslg_spec_networks/compute/results/fmriprep_results/fmriprep/${subj}
    #fs_Dir=/fslgroup/fslg_spec_networks/compute/results/fmriprep_results/freesurfer
    mkdir -p ${out_Dir}

    # 'source' -> YOUR <- config script (with software paths)
    source /fslgroup/fslg_spec_networks/compute/code/ind_parc/CBIG2016_preproc/CBIG_preproc_tested_config_funconn.sh

    # Run the preprocessing pipeline
    ${CBIG_Dir}/stable_projects/preprocessing/CBIG_fMRI_Preproc2016/CBIG_preproc_fMRI_preprocess.csh \
        -s ${subj} \
        -output_d ${out_Dir}/${subj} \
        -anat_s ${subj} \
        -anat_d ${subj_Dir}/anat \
        -fmrinii ${subj_Dir}/${subj}_fmrinii.txt \
        -config ${code_Dir}/example_config.txt 

A few things to note about the flags in the last section of the job script ('Run the preprocessing pipeline'). 

* `-s` Refers to the subject name (designated in the wrapper script)

* `-output_d` Currently set to produce output in /path/to/output/${subj}/${subj}

* `-anat_s` The name of the Freesurfer output directory for the subject (named after the subject in this case)

* `-anat_d` The path to the Freesurfer output 

* `-fmrinii` The path and name of the fmrinii.txt files created in Step 1

* `-config` The path and name of the config file created in Step 1.

Wrapper Script
**************

The wrapper script will look something like the following: 


.. code-block:: bash

    #!/bin/bash

    code_DIR=/fslgroup/fslg_spec_networks/compute/code/ind_parc/CBIG2016_preproc
    output_DIR=/fslgroup/fslg_spec_networks/compute/results/CBIG2016_preproc_FS6

    #Change this first line to your code_DIR pointing to the subjids file
    for subj in sub-AA0002 sub-AA0004; do
        mkdir -p ${code_DIR}/logfiles
        sbatch \
        -o ${code_DIR}/logfiles/output_${subj}.txt \
        -e ${code_DIR}/logfiles/error_${subj}.txt \
        ${code_DIR}/preproc_job.sh \
        ${subj}
        sleep 1
    done

This script will submit a preproc job for each subject listed in the first line of the for loop. If there is a large amount of subjects, consider changing the first line to: "for subj in `cat ${code_dir}/subjids.txt`; do" and include a subjids.txt file containing the needed subject IDs within ${code_dir}.


Troubleshooting Tips and Common Errors
**************************************

In order to isolate an error, our top tip is to review the output logs generated by the preprocessing pipeline. These can be found within your output directory under sub-$SUB/sub-$SUB/logs. If no subject and log folder was generated, check the SLURM logfiles found within your code directory under /logfiles (these will point to a path error or environment issue that occurred when the jobs were submitted).

The log files generated by the preprocessing pipeline consist of an overall logfile that monitors the entire pipeline and then a logfile for each step specified in the config.txt file. To isolate your error, first examine the overall log file (CBIG_preproc_fMRI_preprocess.log) to identify the step where an error occurred and then examine the log file for that step. You can then determine if the pipeline failed due to motion or code issues.

There are a variety of errors that could result, but here are a couple of common ones.

* `bold` During the 'bold' step, the BOLD files are being copied over and renamed to conform with the pipeline's naming conventions. If you encounter during this step, it is probably due to issues with the fmrinii.txt file where you specified the paths to the input BOLD files. For example, if you receive the error: "[BOLD]: Input echo number 1 is not equal to the number of images 0," this could be due to a blank line at the end of the fmrinii.txt file or incorrect paths within the fmrinii.txt file. 

* `skip4` During the 'skip' step, the first `N` frames of each BOLD run are removed. If you encounter an error during this step, it is likely because of a path error in the fmrinii.txt files. Alternatively, you may receive a message that there weren't enough frames (e.g., your BOLD run is too short to skip the number of frames specified).

* `fslmcflirt_outliers` During the 'fslmcflirt_outliers' step, motion outliers are identified and motion correction is performed. If you encounter an error on this step, it is likely due to too many frames exceeding the motion parameters specified in the config.txt file. You might consider increasing the FD and DVARS thresholds to determine if this is the source of the issue. Alternatively, you may consider dropping the subject from analysis if there is too much head motion.

* `bbregister` During the 'bbregister' step, the functional runs are registered to the Freesurfer output (T1w-T2* registration). Errors can occur during this step if there is missing or incomplete Freesurfer output, or if the path to the Freesurfer output specified in the job file is incorrect.

* `native2fsaverage` During the 'native2fsaverage' step, the constructed surface is registered from native space into fsaverage space. If you specified in the config.txt file that you wanted to project to fsaverage6 space, you may encounter an error on this step. Consider adjusting the native2fsaverage line on your config.txt file to specify "-proj fsaverage6 -sm 6 -down fsaverage6"
